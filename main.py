import streamlit as st
import pandas as pd
from models import generate_test_data, create_dataframes
from utils import (
    get_next_procurement_dates,
    get_wear_color,
    get_replacement_type_display,
    calculate_total_parts_needed,
)
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from database import SessionLocal, create_tables, get_db
from crud import (
    create_equipment,
    get_all_equipment,
    get_equipment_by_name,
    create_workshop,
    get_all_workshops,
    create_spare_part,
    get_all_spare_parts,
    get_spare_parts_by_equipment,
    create_replacement_record,
    get_all_replacement_records,
    get_replacement_records_by_equipment,
    update_replacement_record,
    delete_replacement_record,
)
from sqlalchemy.orm import Session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ñ—É—Ä–Ω–∞–ª –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π", page_icon="üîß", layout="wide")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
create_tables()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ session_state
if "data_initialized" not in st.session_state:
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        equipment_count = len(get_all_equipment(db))
        if equipment_count == 0:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            equipment_list, workshops, spare_parts, replacement_records = (
                generate_test_data()
            )
            for eq in equipment_list:
                create_equipment(db, eq.name, eq.qty_in_fleet)
            for ws in workshops:
                create_workshop(db, ws.name, ws.address)
            for sp in spare_parts:
                eq = get_equipment_by_name(db, sp.parent_equipment)
                if eq:
                    create_spare_part(
                        db,
                        sp.name,
                        sp.useful_life_months,
                        eq.id,
                        sp.qty_per_equipment,
                        sp.qty_in_stock,
                        sp.procurement_time_days,
                    )
            for rr in replacement_records:
                eq = get_equipment_by_name(db, rr.equipment_name)
                sp = None
                for sp_obj in get_all_spare_parts(db):
                    if (
                        sp_obj.name == rr.spare_part_name
                        and sp_obj.equipment_id == eq.id
                    ):
                        sp = sp_obj
                        break
                ws = None
                for ws_obj in get_all_workshops(db):
                    if ws_obj.name == rr.workshop_name:
                        ws = ws_obj
                        break
                if eq and sp and ws:
                    create_replacement_record(
                        db,
                        eq.id,
                        sp.id,
                        ws.id,
                        rr.replacement_date,
                        rr.replacement_type,
                        rr.notes,
                    )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ DataFrames
        equipment = get_all_equipment(db)
        workshops = get_all_workshops(db)
        spare_parts = get_all_spare_parts(db)
        replacements = get_all_replacement_records(db)

        st.session_state.equipment_df = pd.DataFrame(
            [
                {
                    "id": eq.id,
                    "name": eq.name,
                    "vin": eq.vin,
                    "qty_in_fleet": eq.qty_in_fleet,
                }
                for eq in equipment
            ]
        )
        st.session_state.workshops_df = pd.DataFrame(
            [{"id": ws.id, "name": ws.name, "address": ws.address} for ws in workshops]
        )
        st.session_state.spare_parts_df = pd.DataFrame(
            [
                {
                    "id": sp.id,
                    "name": sp.name,
                    "useful_life_months": sp.useful_life_months,
                    "parent_equipment": sp.equipment.name,
                    "qty_per_equipment": sp.qty_per_equipment,
                    "qty_in_stock": sp.qty_in_stock,
                    "procurement_time_days": sp.procurement_time_days,
                }
                for sp in spare_parts
            ]
        )
        st.session_state.replacements_df = pd.DataFrame(
            [
                {
                    "id": rr.id,
                    "equipment_name": rr.equipment.name,
                    "spare_part_name": rr.spare_part.name,
                    "workshop_name": rr.workshop.name,
                    "replacement_date": rr.replacement_date,
                    "replacement_type": rr.replacement_type,
                    "notes": rr.notes,
                }
                for rr in replacements
            ]
        )
        st.session_state.data_initialized = True
    finally:
        db.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def add_equipment(name, qty_in_fleet, vin=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
    name         - –ù–∞–∑–≤–∞–Ω–∏–µ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    qty_in_fleet - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø–∞—Ä–∫–µ
    vin          - VIN –Ω–æ–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    db = SessionLocal()
    try:
        eq = create_equipment(db, name, qty_in_fleet, vin)
        new_row = pd.DataFrame(
            {
                "id": [eq.id],
                "name": [name],
                "vin": [vin],
                "qty_in_fleet": [qty_in_fleet],
            }
        )
        st.session_state.equipment_df = pd.concat(
            [st.session_state.equipment_df, new_row], ignore_index=True
        )
    finally:
        db.close()


def add_workshop(name, address):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ú–∞—Å—Ç–µ—Ä—Å–∫–æ–π.
    name    - –ù–∞–∑–≤–∞–Ω–∏–µ –ú–∞—Å—Ç–µ—Ä—Å–∫–æ–π
    address - –ê–¥—Ä–µ—Å –ú–∞—Å—Ç–µ—Ä—Å–∫–æ–π
    """
    db = SessionLocal()
    try:
        ws = create_workshop(db, name, address)
        new_row = pd.DataFrame({"id": [ws.id], "name": [name], "address": [address]})
        st.session_state.workshops_df = pd.concat(
            [st.session_state.workshops_df, new_row], ignore_index=True
        )
    finally:
        db.close()


def add_spare_part(
    name,
    useful_life_months,
    parent_equipment,
    qty_per_equipment,
    qty_in_stock,
    procurement_time_days,
):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏.
    name                    - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏
    useful_life_months      - –°—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –º–µ—Å—è—Ü–∞—Ö
    parent_equipment        - –ö—É–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è (–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)
    qty_per_equipment       - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    qty_in_stock            - –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
    procurement_time_days   - –°—Ä–æ–∫ –∑–∞–∫—É–ø–∫–∏ –∑–∞–ø—á–∞—Å—Ç–∏ (–¥–Ω–∏)
    """
    db = SessionLocal()
    try:
        eq = get_equipment_by_name(db, parent_equipment)
        if eq:
            sp = create_spare_part(
                db,
                name,
                useful_life_months,
                eq.id,
                qty_per_equipment,
                qty_in_stock,
                procurement_time_days,
            )
            new_row = pd.DataFrame(
                {
                    "id": [sp.id],
                    "name": [name],
                    "useful_life_months": [useful_life_months],
                    "parent_equipment": [parent_equipment],
                    "qty_per_equipment": [qty_per_equipment],
                    "qty_in_stock": [qty_in_stock],
                    "procurement_time_days": [procurement_time_days],
                }
            )
            st.session_state.spare_parts_df = pd.concat(
                [st.session_state.spare_parts_df, new_row], ignore_index=True
            )
    finally:
        db.close()


def add_replacement(
    equipment_name,
    spare_part_name,
    workshop_name,
    replacement_date,
    replacement_type,
    notes,
):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –∑–∞–º–µ–Ω–µ.
    equipment_name          - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    spare_part_name         - –ù–∞–∑–≤–∞–Ω–∏–µ –ó–∞–ø—á–∞—Å—Ç–∏
    workshop_name           - –ù–∞–∑–≤–∞–Ω–∏–µ –ú–∞—Å—Ç–µ—Ä—Å–∫–æ–π
    replacement_date        - –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã
    replacement_type        - –¢–∏–ø –∑–∞–º–µ–Ω—ã - (repair-–∑–∞–º–µ–Ω–∞/scheduled-–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è/unscheduled-–Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
    notes                   - –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
    """
    db = SessionLocal()
    try:
        eq = get_equipment_by_name(db, equipment_name)
        sp = None
        for sp_obj in get_all_spare_parts(db):
            if sp_obj.name == spare_part_name and sp_obj.equipment_id == eq.id:
                sp = sp_obj
                break
        ws = None
        for ws_obj in get_all_workshops(db):
            if ws_obj.name == workshop_name:
                ws = ws_obj
                break
        if eq and sp and ws:
            rr = create_replacement_record(
                db, eq.id, sp.id, ws.id, replacement_date, replacement_type, notes
            )
            new_row = pd.DataFrame(
                {
                    "id": [rr.id],
                    "equipment_name": [equipment_name],
                    "spare_part_name": [spare_part_name],
                    "workshop_name": [workshop_name],
                    "replacement_date": [replacement_date],
                    "replacement_type": [replacement_type],
                    "notes": [notes],
                }
            )
            st.session_state.replacements_df = pd.concat(
                [st.session_state.replacements_df, new_row], ignore_index=True
            )
    finally:
        db.close()


# –ù–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
    [
        "–ì–ª–∞–≤–Ω–∞—è",
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏",
        "–£—á–µ—Ç –∑–∞–º–µ–Ω",
        "–ê–Ω–∞–ª–∏–∑ –∏–∑–Ω–æ—Å–∞",
        "–ü–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫",
        "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
    ],
)

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
if page == "–ì–ª–∞–≤–Ω–∞—è":
    st.title("üîß –ñ—É—Ä–Ω–∞–ª –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π")
    st.markdown(
        """
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π!

    **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã:**
    - üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏ (–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∑–∞–ø—á–∞—Å—Ç–∏, –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ)
    - üîÑ –£—á–µ—Ç –∑–∞–º–µ–Ω –∑–∞–ø—á–∞—Å—Ç–µ–π
    - üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
    - üìÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∑–∞–∫—É–ø–æ–∫
    - üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

    –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
    """
    )

    # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ Footer-–µ
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", len(st.session_state.equipment_df))
    with col2:
        st.metric("–ó–∞–ø—á–∞—Å—Ç–∏", len(st.session_state.spare_parts_df))
    with col3:
        st.metric("–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ", len(st.session_state.workshops_df))
    with col4:
        st.metric("–ó–∞–º–µ–Ω", len(st.session_state.replacements_df))

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
elif page == "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏":
    st.title("üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏")

    tab1, tab2, tab3 = st.tabs(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ", "–ó–∞–ø—á–∞—Å—Ç–∏"])

    with tab1:
        st.subheader("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"):
            with st.form("add_equipment_form"):
                name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
                vin = st.text_input("VIN –Ω–æ–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
                qty_in_fleet = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø–∞—Ä–∫–µ", min_value=1, value=1
                )
                submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                if submitted and name:
                    add_equipment(name, qty_in_fleet, vin if vin else None)
                    st.success("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                    st.rerun()

        equipment_display_df = st.session_state.equipment_df.rename(
            columns={
                "name": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
                "vin": "VIN",
                "qty_in_fleet": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø–∞—Ä–∫–µ",
            }
        )
        st.dataframe(equipment_display_df, width="content")

        # –í—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ–Ω
        selected_equipment = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ–Ω:",
            st.session_state.equipment_df["name"].tolist(),
            key="equipment_replacements_select",
        )

        if selected_equipment:
            db = SessionLocal()
            try:
                eq = get_equipment_by_name(db, selected_equipment)
                if eq:
                    replacements = get_replacement_records_by_equipment(db, eq.id)
                    if replacements:
                        replacements_df = pd.DataFrame(
                            [
                                {
                                    "–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã": rr.replacement_date.strftime(
                                        "%d.%m.%Y"
                                    ),
                                    "–ó–∞–ø—á–∞—Å—Ç—å": rr.spare_part.name,
                                    "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è": rr.workshop.name,
                                    "–¢–∏–ø –∑–∞–º–µ–Ω—ã": get_replacement_type_display(
                                        rr.replacement_type
                                    ),
                                    "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è": rr.notes or "",
                                }
                                for rr in replacements
                            ]
                        ).sort_values("–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã", ascending=False)
                        st.subheader(f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ–Ω –¥–ª—è {selected_equipment}")
                        st.dataframe(replacements_df, width="content")
                    else:
                        st.info(
                            f"–î–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è {selected_equipment} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–º–µ–Ω–∞—Ö"
                        )
            finally:
                db.close()

    with tab2:
        st.subheader("–ê–≤—Ç–æ—Ä–µ–º–æ–Ω—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ")
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä—Å–∫—É—é"):
            with st.form("add_workshop_form"):
                name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
                address = st.text_input("–ê–¥—Ä–µ—Å")
                submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                if submitted and name and address:
                    add_workshop(name, address)
                    st.success("–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.rerun()

        workshops_display_df = st.session_state.workshops_df.rename(
            columns={
                "name": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
                "address": "–ê–¥—Ä–µ—Å",
            }
        )
        st.dataframe(workshops_display_df, width="content")

    with tab3:
        st.subheader("–ó–∞–ø—á–∞—Å—Ç–∏")
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å"):
            with st.form("add_spare_part_form"):
                name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
                useful_life_months = st.number_input(
                    "–°—Ä–æ–∫ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–º–µ—Å—è—Ü—ã)", min_value=1, value=12
                )
                parent_equipment = st.selectbox(
                    "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                    st.session_state.equipment_df["name"].tolist(),
                )
                qty_per_equipment = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –µ–¥–∏–Ω–∏—Ü–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", min_value=1, value=1
                )
                qty_in_stock = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ", min_value=0, value=0
                )
                procurement_time_days = st.number_input(
                    "–°—Ä–æ–∫ –∑–∞–∫—É–ø–∫–∏ (–¥–Ω–∏)", min_value=1, value=7
                )
                submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                if submitted and name:
                    add_spare_part(
                        name,
                        useful_life_months,
                        parent_equipment,
                        qty_per_equipment,
                        qty_in_stock,
                        procurement_time_days,
                    )
                    st.success("–ó–∞–ø—á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.rerun()

        spare_parts_display_df = st.session_state.spare_parts_df.rename(
            columns={
                "name": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
                "useful_life_months": "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–º–µ—Å—è—Ü—ã)",
                "parent_equipment": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                "qty_per_equipment": "–ö–æ–ª-–≤–æ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É",
                "qty_in_stock": "–ù–∞ —Å–∫–ª–∞–¥–µ",
                "procurement_time_days": "–°—Ä–æ–∫ –∑–∞–∫—É–ø–∫–∏ (–¥–Ω–∏)",
            }
        )
        st.dataframe(spare_parts_display_df, width="content")

# –£—á–µ—Ç –∑–∞–º–µ–Ω
elif page == "–£—á–µ—Ç –∑–∞–º–µ–Ω":
    st.title("üîÑ –£—á–µ—Ç –∑–∞–º–µ–Ω –∑–∞–ø—á–∞—Å—Ç–µ–π")

    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É"):
        with st.form("add_replacement_form"):
            equipment_name = st.selectbox(
                "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", st.session_state.equipment_df["name"].tolist()
            )
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
            suitable_parts = st.session_state.spare_parts_df[
                st.session_state.spare_parts_df["parent_equipment"] == equipment_name
            ]["name"].tolist()
            spare_part_name = st.selectbox(
                "–ó–∞–ø—á–∞—Å—Ç—å",
                suitable_parts if suitable_parts else ["–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π"],
            )
            workshop_name = st.selectbox(
                "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è", st.session_state.workshops_df["name"].tolist()
            )
            replacement_date = st.date_input("–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã", datetime.now().date())
            replacement_type = st.selectbox(
                "–¢–∏–ø –∑–∞–º–µ–Ω—ã",
                ["repair", "scheduled", "unscheduled"],
                format_func=get_replacement_type_display,
            )
            notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", height=100)
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
            if (
                submitted
                and equipment_name
                and spare_part_name != "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π"
            ):
                add_replacement(
                    equipment_name,
                    spare_part_name,
                    workshop_name,
                    pd.to_datetime(replacement_date),
                    replacement_type,
                    notes,
                )
                st.success("–ó–∞–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()

    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ–Ω
    replacements_display_df = st.session_state.replacements_df.rename(
        columns={
            "equipment_name": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "spare_part_name": "–ó–∞–ø—á–∞—Å—Ç—å",
            "workshop_name": "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è",
            "replacement_date": "–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã",
            "replacement_type": "–¢–∏–ø –∑–∞–º–µ–Ω—ã",
            "notes": "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
        }
    )
    st.dataframe(replacements_display_df, width="content")

# –ê–Ω–∞–ª–∏–∑ –∏–∑–Ω–æ—Å–∞
elif page == "–ê–Ω–∞–ª–∏–∑ –∏–∑–Ω–æ—Å–∞":
    st.title("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞")

    # –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–∑–Ω–æ—Å–µ
    wear_data = calculate_total_parts_needed(
        st.session_state.equipment_df,
        st.session_state.spare_parts_df,
        st.session_state.replacements_df,
    )

    if not wear_data.empty:
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞
        wear_summary = wear_data.groupby("wear_level").size().reset_index(name="count")
        st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞")
        for _, row in wear_summary.iterrows():
            color = get_wear_color(row["wear_level"])
            if row["wear_level"] == "green":
                description = "–æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª–µ–µ 25% –æ—Ç —Å—Ä–æ–∫–∞ –ø–æ–ª–µ–∑–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"
            elif row["wear_level"] == "yellow":
                description = "–æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 25% –æ—Ç —Å—Ä–æ–∫–∞ –ø–æ–ª–µ–∑–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"
            elif row["wear_level"] == "red":
                description = "–æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 10% –æ—Ç —Å—Ä–æ–∫–∞ –ø–æ–ª–µ–∑–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"
            else:
                description = ""
            st.markdown(
                f"""
            <div style="background-color: {color}; padding: 10px; margin: 5px 0; border-radius: 5px; color: white; display: inline-block; width: auto;">
                <strong>{row['wear_level'].upper()}</strong>: {row['count']} –∑–∞–ø—á–∞—Å—Ç–µ–π ({description})
            </div>
            """,
                unsafe_allow_html=True,
            )

        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        fig = px.pie(
            wear_summary,
            values="count",
            names="wear_level",
            labels={"wear_level": "–£—Ä–æ–≤–µ–Ω—å –∏–∑–Ω–æ—Å–∞"},
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞",
            color="wear_level",
            color_discrete_map={
                "green": "#28a745",
                "yellow": "#ffc107",
                "red": "#dc3545",
            },
        )
        st.plotly_chart(fig, config=dict(displayModeBar=False))

        st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
        def color_wear_level(val):
            color = get_wear_color(val)
            return f"background-color: {color}; color: white"

        # styled_df = wear_data.style.applymap(color_wear_level, subset=["wear_level"])
        wear_display_df = wear_data.rename(
            columns={
                "equipment_name": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                "part_name": "–ó–∞–ø—á–∞—Å—Ç—å",
                "total_needed": "–¢—Ä–µ–±—É–µ—Ç—Å—è",
                "qty_in_stock": "–ù–∞ —Å–∫–ª–∞–¥–µ",
                "wear_level": "–°—Ç–µ–ø–µ–Ω—å –∏–∑–Ω–æ—Å–∞",
                "remaining_pct": "–û—Å—Ç–∞—Ç–æ–∫ (%)",
                "procurement_deadline": "–°—Ä–æ–∫ –∑–∞–∫—É–ø–∫–∏",
                "procurement_time_days": "–í—Ä–µ–º—è –Ω–∞ –∑–∞–∫—É–ø–∫—É, –¥–Ω.",
            }
        )
        styled_df = wear_display_df.style.map(
            color_wear_level, subset=["–°—Ç–µ–ø–µ–Ω—å –∏–∑–Ω–æ—Å–∞"]
        )
        st.dataframe(styled_df, width="content")

        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        selected_equipment = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é",
            ["–í—Å–µ"] + wear_data["equipment_name"].unique().tolist(),
        )

        if selected_equipment != "–í—Å–µ":
            filtered_data = wear_data[wear_data["equipment_name"] == selected_equipment]
        else:
            filtered_data = wear_data

        filtered_display_df = filtered_data.rename(
            columns={
                "equipment_name": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                "part_name": "–ó–∞–ø—á–∞—Å—Ç—å",
                "total_needed": "–¢—Ä–µ–±—É–µ—Ç—Å—è",
                "qty_in_stock": "–ù–∞ —Å–∫–ª–∞–¥–µ",
                "wear_level": "–°—Ç–µ–ø–µ–Ω—å –∏–∑–Ω–æ—Å–∞",
                "remaining_pct": "–û—Å—Ç–∞—Ç–æ–∫ (%)",
                "procurement_deadline": "–°—Ä–æ–∫ –∑–∞–∫—É–ø–∫–∏",
                "procurement_time_days": "–í—Ä–µ–º—è –Ω–∞ –∑–∞–∫—É–ø–∫—É, –¥–Ω.",
            }
        )
        st.dataframe(filtered_display_df, width="content")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–Ω–æ—Å–∞")

# –ü–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫
elif page == "–ü–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫":
    st.title("üìÖ –ü–ª–∞–Ω –∑–∞–∫—É–ø–∫–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π")

    # –†–∞—Å—á–µ—Ç –ø–ª–∞–Ω–∞ –∑–∞–∫—É–ø–æ–∫
    procurement_data = calculate_total_parts_needed(
        st.session_state.equipment_df,
        st.session_state.spare_parts_df,
        st.session_state.replacements_df,
    )

    if not procurement_data.empty:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø—á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∑–∞–∫—É–ø–∫–∏
        procurement_needed = procurement_data[
            (procurement_data["wear_level"].isin(["yellow", "red"]))
            | (procurement_data["qty_in_stock"] < procurement_data["total_needed"])
        ].copy()

        if not procurement_needed.empty:
            # –†–∞—Å—á–µ—Ç –¥–∞—Ç –∑–∞–∫—É–ø–∫–∏
            procurement_needed["next_procurement_dates"] = procurement_needed[
                "procurement_deadline"
            ].apply(lambda x: get_next_procurement_dates(x) if pd.notna(x) else [])

            st.subheader("–ó–∞–ø—á–∞—Å—Ç–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∑–∞–∫—É–ø–∫–∏")
            procurement_display_df = procurement_needed[
                [
                    "equipment_name",
                    "part_name",
                    "total_needed",
                    "qty_in_stock",
                    "wear_level",
                    "remaining_pct",
                    "procurement_deadline",
                ]
            ].rename(
                columns={
                    "equipment_name": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                    "part_name": "–ó–∞–ø—á–∞—Å—Ç—å",
                    "total_needed": "–¢—Ä–µ–±—É–µ—Ç—Å—è",
                    "qty_in_stock": "–ù–∞ —Å–∫–ª–∞–¥–µ",
                    "wear_level": "–°—Ç–µ–ø–µ–Ω—å –∏–∑–Ω–æ—Å–∞",
                    "remaining_pct": "–û—Å—Ç–∞—Ç–æ–∫ (%)",
                    "procurement_deadline": "–°—Ä–æ–∫ –∑–∞–∫—É–ø–∫–∏",
                }
            )
            st.dataframe(procurement_display_df, width="content")

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º
            procurement_plan = []
            for _, row in procurement_needed.iterrows():
                if row["next_procurement_dates"]:
                    for proc_date in row["next_procurement_dates"]:
                        procurement_plan.append(
                            {
                                "date": proc_date,
                                "equipment": row["equipment_name"],
                                "part": row["part_name"],
                                "needed": row["total_needed"] - row["qty_in_stock"],
                                "wear_level": row["wear_level"],
                            }
                        )

            if procurement_plan:
                plan_df = pd.DataFrame(procurement_plan).sort_values("date")
                st.subheader("–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫")
                plan_display_df = plan_df.rename(
                    columns={
                        "date": "–î–∞—Ç–∞",
                        "equipment": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                        "part": "–ó–∞–ø—á–∞—Å—Ç—å",
                        "needed": "–¢—Ä–µ–±—É–µ—Ç—Å—è",
                        "wear_level": "–°—Ä–æ—á–Ω–æ—Å—Ç—å",
                    }
                )
                st.dataframe(plan_display_df, width="content")

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è 'needed' –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                plan_df["needed"] = plan_df["needed"].clip(
                    lower=1
                )  # –ú–∏–Ω–∏–º—É–º 1 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                fig = px.scatter(
                    plan_df,
                    x="date",
                    y="needed",
                    color="wear_level",
                    size="needed",
                    title="–ü–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫ –ø–æ –¥–∞—Ç–∞–º",
                    labels={
                        "date": "–î–∞—Ç–∞ –∑–∞–∫—É–ø–∫–∏",
                        "needed": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ, —à—Ç.",
                    },
                    color_discrete_map={
                        "green": "#28a745",
                        "yellow": "#ffc107",
                        "red": "#dc3545",
                    },
                )
                st.plotly_chart(fig, config=dict(displayModeBar=False))
            else:
                st.info("–ù–µ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö —Å—Ä–æ—á–Ω–æ–π –∑–∞–∫—É–ø–∫–∏")
        else:
            st.success("–í—Å–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ!")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –∑–∞–∫—É–ø–æ–∫")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
elif page == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏":
    st.title("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

    tab1, tab2, tab3 = st.tabs(
        ["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ–Ω", "–ê–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–æ–≤"]
    )

    with tab1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")
        parts_by_equipment = (
            st.session_state.spare_parts_df.groupby("parent_equipment")
            .size()
            .reset_index(name="count")
        )
        fig = px.bar(
            parts_by_equipment,
            x="parent_equipment",
            y="count",
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
            labels={
                "parent_equipment": "–¢–∏–ø –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            },
        )
        st.plotly_chart(fig, config=dict(displayModeBar=False))

    with tab2:
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        if not st.session_state.replacements_df.empty:
            replacements_over_time = st.session_state.replacements_df.copy()
            replacements_over_time["month"] = replacements_over_time[
                "replacement_date"
            ].dt.to_period("M")
            monthly_replacements = (
                replacements_over_time.groupby("month").size().reset_index(name="count")
            )
            monthly_replacements["month"] = monthly_replacements["month"].astype(str)

            fig = px.line(
                monthly_replacements,
                x="month",
                y="count",
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω –ø–æ –º–µ—Å—è—Ü–∞–º",
                labels={
                    "month": "–ú–µ—Å—è—Ü",
                    "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                },
            )
            st.plotly_chart(fig, config=dict(displayModeBar=False))
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–º–µ–Ω–∞—Ö")

    with tab3:
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–æ–≤ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        fig = px.histogram(
            st.session_state.spare_parts_df,
            x="useful_life_months",
            # y="count",
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–µ–π",
            labels={
                "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π",
                "useful_life_months": "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–º–µ—Å—è—Ü—ã)",
            },
        )
        st.plotly_chart(fig, config=dict(displayModeBar=False))

        fig2 = px.histogram(
            st.session_state.spare_parts_df,
            x="procurement_time_days",
            # y="count",
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –∑–∞–∫—É–ø–∫–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π",
            labels={
                "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π",
                "procurement_time_days": "–°—Ä–æ–∫ –∑–∞–∫—É–ø–∫–∏ (–î–Ω–∏)",
            },
        )
        st.plotly_chart(fig2, config=dict(displayModeBar=False))
