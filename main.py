import streamlit as st
import pandas as pd
from models import generate_test_data, create_dataframes
from utils import (
    calculate_wear_level,
    calculate_procurement_deadline,
    get_next_procurement_dates,
    get_wear_color,
    format_date,
    get_replacement_type_display,
    calculate_total_parts_needed,
)
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ñ—É—Ä–Ω–∞–ª –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π", page_icon="üîß", layout="wide")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ session_state
if "data_initialized" not in st.session_state:
    equipment_list, workshops, spare_parts, replacement_records = generate_test_data()
    (
        st.session_state.equipment_df,
        st.session_state.workshops_df,
        st.session_state.spare_parts_df,
        st.session_state.replacements_df,
    ) = create_dataframes(equipment_list, workshops, spare_parts, replacement_records)
    st.session_state.data_initialized = True


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def add_equipment(name, qty_in_fleet):
    new_row = pd.DataFrame({"name": [name], "qty_in_fleet": [qty_in_fleet]})
    st.session_state.equipment_df = pd.concat(
        [st.session_state.equipment_df, new_row], ignore_index=True
    )


def add_workshop(name, address):
    new_row = pd.DataFrame({"name": [name], "address": [address]})
    st.session_state.workshops_df = pd.concat(
        [st.session_state.workshops_df, new_row], ignore_index=True
    )


def add_spare_part(
    name,
    useful_life_months,
    parent_equipment,
    qty_per_equipment,
    qty_in_stock,
    procurement_time_days,
):
    new_row = pd.DataFrame(
        {
            "name": [name],
            "useful_life_months": [useful_life_months],
            "parent_equipment": [parent_equipment],
            "qty_per_equipment": [qty_per_equipment],
            "qty_in_stock": [qty_in_stock],
            "procurement_time_days": [procurement_time_days],
        }
    )
    st.session_state.spare_parts_df = pd.concat(
        [st.session_state.spare_parts_df, new_row], ignore_index=True
    )


def add_replacement(
    equipment_name,
    spare_part_name,
    workshop_name,
    replacement_date,
    replacement_type,
    notes,
):
    new_row = pd.DataFrame(
        {
            "equipment_name": [equipment_name],
            "spare_part_name": [spare_part_name],
            "workshop_name": [workshop_name],
            "replacement_date": [replacement_date],
            "replacement_type": [replacement_type],
            "notes": [notes],
        }
    )
    st.session_state.replacements_df = pd.concat(
        [st.session_state.replacements_df, new_row], ignore_index=True
    )


# –ù–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
    [
        "–ì–ª–∞–≤–Ω–∞—è",
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏",
        "–£—á–µ—Ç –∑–∞–º–µ–Ω",
        "–ê–Ω–∞–ª–∏–∑ –∏–∑–Ω–æ—Å–∞",
        "–ü–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫",
        "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
    ],
)

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
if page == "–ì–ª–∞–≤–Ω–∞—è":
    st.title("üîß –ñ—É—Ä–Ω–∞–ª –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π")
    st.markdown(
        """
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π!

    **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã:**
    - üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏ (–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∑–∞–ø—á–∞—Å—Ç–∏, –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ)
    - üîÑ –£—á–µ—Ç –∑–∞–º–µ–Ω –∑–∞–ø—á–∞—Å—Ç–µ–π
    - üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
    - üìÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∑–∞–∫—É–ø–æ–∫
    - üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

    –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
    """
    )

    # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", len(st.session_state.equipment_df))
    with col2:
        st.metric("–ó–∞–ø—á–∞—Å—Ç–∏", len(st.session_state.spare_parts_df))
    with col3:
        st.metric("–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ", len(st.session_state.workshops_df))
    with col4:
        st.metric("–ó–∞–º–µ–Ω", len(st.session_state.replacements_df))

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
elif page == "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏":
    st.title("üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏")

    tab1, tab2, tab3 = st.tabs(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ", "–ó–∞–ø—á–∞—Å—Ç–∏"])

    with tab1:
        st.subheader("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
        col1, col2 = st.columns([3, 1])

        with col1:
            st.dataframe(st.session_state.equipment_df, width="stretch")

        with col2:
            with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"):
                with st.form("add_equipment_form"):
                    name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
                    qty_in_fleet = st.number_input(
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø–∞—Ä–∫–µ", min_value=1, value=1
                    )
                    submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                    if submitted and name:
                        add_equipment(name, qty_in_fleet)
                        st.success("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                        st.rerun()

    with tab2:
        st.subheader("–ê–≤—Ç–æ—Ä–µ–º–æ–Ω—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ")
        col1, col2 = st.columns([3, 1])

        with col1:
            st.dataframe(st.session_state.workshops_df, width="stretch")

        with col2:
            with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä—Å–∫—É—é"):
                with st.form("add_workshop_form"):
                    name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
                    address = st.text_input("–ê–¥—Ä–µ—Å")
                    submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                    if submitted and name and address:
                        add_workshop(name, address)
                        st.success("–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                        st.rerun()

    with tab3:
        st.subheader("–ó–∞–ø—á–∞—Å—Ç–∏")
        col1, col2 = st.columns([3, 1])

        with col1:
            st.dataframe(st.session_state.spare_parts_df, width="stretch")

        with col2:
            with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å"):
                with st.form("add_spare_part_form"):
                    name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
                    useful_life_months = st.number_input(
                        "–°—Ä–æ–∫ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–º–µ—Å—è—Ü—ã)", min_value=1, value=12
                    )
                    parent_equipment = st.selectbox(
                        "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                        st.session_state.equipment_df["name"].tolist(),
                    )
                    qty_per_equipment = st.number_input(
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –µ–¥–∏–Ω–∏—Ü–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", min_value=1, value=1
                    )
                    qty_in_stock = st.number_input(
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ", min_value=0, value=0
                    )
                    procurement_time_days = st.number_input(
                        "–°—Ä–æ–∫ –∑–∞–∫—É–ø–∫–∏ (–¥–Ω–∏)", min_value=1, value=7
                    )
                    submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                    if submitted and name:
                        add_spare_part(
                            name,
                            useful_life_months,
                            parent_equipment,
                            qty_per_equipment,
                            qty_in_stock,
                            procurement_time_days,
                        )
                        st.success("–ó–∞–ø—á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                        st.rerun()

# –£—á–µ—Ç –∑–∞–º–µ–Ω
elif page == "–£—á–µ—Ç –∑–∞–º–µ–Ω":
    st.title("üîÑ –£—á–µ—Ç –∑–∞–º–µ–Ω –∑–∞–ø—á–∞—Å—Ç–µ–π")

    col1, col2 = st.columns([3, 1])

    with col1:
        st.dataframe(st.session_state.replacements_df, width="stretch")

    with col2:
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É"):
            with st.form("add_replacement_form"):
                equipment_name = st.selectbox(
                    "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", st.session_state.equipment_df["name"].tolist()
                )
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
                suitable_parts = st.session_state.spare_parts_df[
                    st.session_state.spare_parts_df["parent_equipment"]
                    == equipment_name
                ]["name"].tolist()
                spare_part_name = st.selectbox(
                    "–ó–∞–ø—á–∞—Å—Ç—å",
                    suitable_parts if suitable_parts else ["–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π"],
                )
                workshop_name = st.selectbox(
                    "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è", st.session_state.workshops_df["name"].tolist()
                )
                replacement_date = st.date_input("–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã", datetime.now().date())
                replacement_type = st.selectbox(
                    "–¢–∏–ø –∑–∞–º–µ–Ω—ã",
                    ["repair", "scheduled", "unscheduled"],
                    format_func=get_replacement_type_display,
                )
                notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", height=100)
                submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                if (
                    submitted
                    and equipment_name
                    and spare_part_name != "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π"
                ):
                    add_replacement(
                        equipment_name,
                        spare_part_name,
                        workshop_name,
                        pd.to_datetime(replacement_date),
                        replacement_type,
                        notes,
                    )
                    st.success("–ó–∞–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.rerun()

# –ê–Ω–∞–ª–∏–∑ –∏–∑–Ω–æ—Å–∞
elif page == "–ê–Ω–∞–ª–∏–∑ –∏–∑–Ω–æ—Å–∞":
    st.title("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞")

    # –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–∑–Ω–æ—Å–µ
    wear_data = calculate_total_parts_needed(
        st.session_state.equipment_df,
        st.session_state.spare_parts_df,
        st.session_state.replacements_df,
    )

    if not wear_data.empty:
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞
        wear_summary = wear_data.groupby("wear_level").size().reset_index(name="count")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞")
            for _, row in wear_summary.iterrows():
                color = get_wear_color(row["wear_level"])
                st.markdown(
                    f"""
                <div style="background-color: {color}; padding: 10px; margin: 5px 0; border-radius: 5px; color: white;">
                    <strong>{row['wear_level'].upper()}</strong>: {row['count']} –∑–∞–ø—á–∞—Å—Ç–µ–π
                </div>
                """,
                    unsafe_allow_html=True,
                )

        with col2:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            fig = px.pie(
                wear_summary,
                values="count",
                names="wear_level",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞",
                color="wear_level",
                color_discrete_map={
                    "green": "#28a745",
                    "yellow": "#ffc107",
                    "red": "#dc3545",
                },
            )
            st.plotly_chart(fig, config=dict(displayModeBar=False))

        st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
        def color_wear_level(val):
            color = get_wear_color(val)
            return f"background-color: {color}; color: white"

        # styled_df = wear_data.style.applymap(color_wear_level, subset=["wear_level"])
        styled_df = wear_data.style.map(color_wear_level, subset=["wear_level"])
        st.dataframe(styled_df, width="stretch")

        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        selected_equipment = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é",
            ["–í—Å–µ"] + wear_data["equipment_name"].unique().tolist(),
        )

        if selected_equipment != "–í—Å–µ":
            filtered_data = wear_data[wear_data["equipment_name"] == selected_equipment]
        else:
            filtered_data = wear_data

        st.dataframe(filtered_data, width="stretch")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–Ω–æ—Å–∞")

# –ü–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫
elif page == "–ü–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫":
    st.title("üìÖ –ü–ª–∞–Ω –∑–∞–∫—É–ø–∫–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π")

    # –†–∞—Å—á–µ—Ç –ø–ª–∞–Ω–∞ –∑–∞–∫—É–ø–æ–∫
    procurement_data = calculate_total_parts_needed(
        st.session_state.equipment_df,
        st.session_state.spare_parts_df,
        st.session_state.replacements_df,
    )

    if not procurement_data.empty:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø—á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∑–∞–∫—É–ø–∫–∏
        procurement_needed = procurement_data[
            (procurement_data["wear_level"].isin(["yellow", "red"]))
            | (procurement_data["qty_in_stock"] < procurement_data["total_needed"])
        ].copy()

        if not procurement_needed.empty:
            # –†–∞—Å—á–µ—Ç –¥–∞—Ç –∑–∞–∫—É–ø–∫–∏
            procurement_needed["next_procurement_dates"] = procurement_needed[
                "procurement_deadline"
            ].apply(lambda x: get_next_procurement_dates(x) if pd.notna(x) else [])

            st.subheader("–ó–∞–ø—á–∞—Å—Ç–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∑–∞–∫—É–ø–∫–∏")
            st.dataframe(
                procurement_needed[
                    [
                        "equipment_name",
                        "part_name",
                        "total_needed",
                        "qty_in_stock",
                        "wear_level",
                        "remaining_pct",
                        "procurement_deadline",
                    ]
                ],
                width="stretch",
            )

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º
            procurement_plan = []
            for _, row in procurement_needed.iterrows():
                if row["next_procurement_dates"]:
                    for proc_date in row["next_procurement_dates"]:
                        procurement_plan.append(
                            {
                                "date": proc_date,
                                "equipment": row["equipment_name"],
                                "part": row["part_name"],
                                "needed": row["total_needed"] - row["qty_in_stock"],
                                "wear_level": row["wear_level"],
                            }
                        )

            if procurement_plan:
                plan_df = pd.DataFrame(procurement_plan).sort_values("date")
                st.subheader("–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫")
                st.dataframe(plan_df, width="stretch")

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞
                fig = px.scatter(
                    plan_df,
                    x="date",
                    y="needed",
                    color="wear_level",
                    size="needed",
                    title="–ü–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫ –ø–æ –¥–∞—Ç–∞–º",
                    color_discrete_map={
                        "green": "#28a745",
                        "yellow": "#ffc107",
                        "red": "#dc3545",
                    },
                )
                st.plotly_chart(fig, config=dict(displayModeBar=False))
            else:
                st.info("–ù–µ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö —Å—Ä–æ—á–Ω–æ–π –∑–∞–∫—É–ø–∫–∏")
        else:
            st.success("–í—Å–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ!")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –∑–∞–∫—É–ø–æ–∫")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
elif page == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏":
    st.title("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

    tab1, tab2, tab3 = st.tabs(
        ["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ–Ω", "–ê–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–æ–≤"]
    )

    with tab1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")
        parts_by_equipment = (
            st.session_state.spare_parts_df.groupby("parent_equipment")
            .size()
            .reset_index(name="count")
        )
        fig = px.bar(
            parts_by_equipment,
            x="parent_equipment",
            y="count",
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        )
        st.plotly_chart(fig, config=dict(displayModeBar=False))

    with tab2:
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        if not st.session_state.replacements_df.empty:
            replacements_over_time = st.session_state.replacements_df.copy()
            replacements_over_time["month"] = replacements_over_time[
                "replacement_date"
            ].dt.to_period("M")
            monthly_replacements = (
                replacements_over_time.groupby("month").size().reset_index(name="count")
            )
            monthly_replacements["month"] = monthly_replacements["month"].astype(str)

            fig = px.line(
                monthly_replacements,
                x="month",
                y="count",
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω –ø–æ –º–µ—Å—è—Ü–∞–º",
            )
            st.plotly_chart(fig, config=dict(displayModeBar=False))
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–º–µ–Ω–∞—Ö")

    with tab3:
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–æ–≤ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        fig = px.histogram(
            st.session_state.spare_parts_df,
            x="useful_life_months",
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–µ–π",
        )
        st.plotly_chart(fig, config=dict(displayModeBar=False))

        fig2 = px.histogram(
            st.session_state.spare_parts_df,
            x="procurement_time_days",
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –∑–∞–∫—É–ø–∫–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π",
        )
        st.plotly_chart(fig2, config=dict(displayModeBar=False))
